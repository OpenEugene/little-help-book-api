@page "/places/cat/{CatId}"
@page "/places/sub/{SubId}"
@page "/places/search/{Words}"

@inject ClientCache cache
@inject IJSRuntime JSRuntime;

<Infos CatId="@CatId"/>

@if (places == null)
{
    <RadzenCard style="width: 100%">
        <i>Loading...</i>
    </RadzenCard>

}
else
{
    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@places" TItem="Place">
        <Template Context="place">
            <PlaceCard Place="place" />
        </Template>
    </RadzenDataList>

}


@code {

    [Parameter]
    public string SubId { get; set; }

    [Parameter]
    public string CatId { get; set; }

    [Parameter]
    public string Words { get; set; }

    private IEnumerable<Place> places;
    private IEnumerable<Info> infos;

    protected override async Task OnInitializedAsync()
    {
        if (CatId?.Length > 0)
        {
            places = await cache.GetPlacesByCat(CatId);
            infos = await cache.GetInfosByCat(CatId);

            return;
        }
        if (SubId?.Length > 0)
        {
            places = await cache.GetPlacesBySub(SubId);
            return;
        }

      
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Words?.Length > 0)
        {
            await cache.Search(Words);
            places = await cache.GetFoundPlaces();
            return;
        }
    }

}
