@page "/map"

@using AirtableApiClient
@using LittleHelpBook.Shared
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

@inject ClientCache cache

<RadzenFieldset Text="Map">
    <GoogleMap @ref="@map1" Id="map1"
               Options="@mapOptions"
               OnAfterInit="@(async () => await OnAfterMapInitAsync())">

    </GoogleMap>
</RadzenFieldset>

@code {

    private GoogleMap map1;
    private MapOptions mapOptions;

    private Stack<Marker> markers = new Stack<Marker>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await cache.GetAllPlaces();

        }
    }
    protected override async Task OnInitializedAsync()
    {

        mapOptions = new MapOptions()
        {
            Zoom = 10,
            Center = new LatLngLiteral()
            {
                Lat = 44.049735,
                Lng = -123.092554
            },
            MapTypeId = MapTypeId.Roadmap
        };

    }
    private async Task OnAfterMapInitAsync()
    {
        var places = await cache.GetAllPlaces();
        var placesList = places.Where(x => IsValid(x.Latitude, x.Longitude)).ToList();

        foreach (var place in placesList)
        {
            if (place != null)
            {
                if (IsValid(place.Latitude, place.Longitude))
                {

                    await AddMarker(place);
                    Console.WriteLine($"{place.Latitude}, {place.Longitude}");
                }

            }
        }

    }

    public static bool IsValid(double latitude, double longtitude)
    {
        if (latitude == 0 && longtitude == 0)
        {
            return false;
        }

        if (latitude < -90 || latitude > 90)
        {
            return false;
        }

        if (longtitude < -180 || longtitude > 180)
        {
            return false;
        }


        return true;
    }

    private async Task AddMarker(LittleHelpBook.Shared.Data.Place place)
    {
        var position = new LatLngLiteral {Lat = place.Latitude, Lng = place.Longitude};

        var marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
        {
            Position = position,
            Map = map1.InteropObject,
            //Label = label
            //Icon = new Icon()
            //{
            //    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            //}
        });

        var infoWindow = await InfoWindow.CreateAsync(map1.JsRuntime, new InfoWindowOptions()
        {
            Position = new LatLngLiteral()
            {
                Lat = 13.505892,
                Lng = 100.8162
            },

        });

        var infoWindowContent = $"<a href='place/{place.Id}'>{place.Name}</a>";

        await marker.AddListener("click", async () =>
        {
            await infoWindow.SetContent(infoWindowContent);
            await infoWindow.SetPosition(position);
            await infoWindow.Open(map1.InteropObject);
        });


        markers.Push(marker);


    }
}
